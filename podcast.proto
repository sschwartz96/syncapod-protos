syntax = "proto3";
package protos;

import "google/protobuf/timestamp.proto";
import "user.proto";

option go_package = ".;protos";

message Image {
    string title = 1;
    string url = 2;
}

message Category {
    string text = 1;
    repeated Category category = 2;
}

message Podcast {
    string id = 1; 
    string title = 2;
    string author = 3;
    bool episodic = 4;
    string summary = 5;
    string link = 6;
    Image image = 7;
    string explicit = 8;
    string language = 9;
    repeated string Keywords = 10;
    repeated Category category = 11;
    google.protobuf.Timestamp pubDate = 12;
    google.protobuf.Timestamp lastBuildDate = 13;
    string rss = 14;
}

message Episode {
    string id = 1;
    string podcastID = 2;
    string title = 3;
    string author = 4;
    string type = 5;
    Image image = 6;
    google.protobuf.Timestamp pubDate = 7;
    string description = 8;
    string summary = 9;
    int32 season = 10;
    int32 episode = 11;
    repeated Category category = 12;
    string explicit = 13;
    string MP3URL = 14;
    int64 durationMillis = 15;
    string subtitle = 16;
}

// (PodcastService)

// start & end represen the amount of episodes to return
message Request {
    //string token = 1;
    string podcastID = 2;
    string episodeID = 3;
    int64 start = 4;
    int64 end = 5;
}

message UserEpisodeReq {
    //string token = 1;
    string podcastID = 2;
    string episodeID = 3;
    int64 offset = 4;
    google.protobuf.Timestamp lastSeen = 5;
    bool played = 6;
}

message Response {
    bool success = 1;
    string message = 2;
}

message LastPlayedRes {
    Podcast podcast = 1;
    Episode episode = 2;
    int64 millis = 3;
}

message Subscriptions {
    repeated Subscription subscriptions = 1;
}

message Episodes {
    repeated Episode episodes = 1;
}

service Pod {
    rpc GetPodcast(Request) returns (Podcast) {}
    rpc GetEpisodes(Request) returns (Episodes) {}
    rpc GetUserEpisode(Request) returns (UserEpisode) {}
    rpc UpdateUserEpisode(UserEpisodeReq) returns (Response) {}
    rpc GetSubscriptions(Request) returns (Subscriptions) {}
    rpc GetUserLastPlayed(Request) returns (LastPlayedRes) {}
}
